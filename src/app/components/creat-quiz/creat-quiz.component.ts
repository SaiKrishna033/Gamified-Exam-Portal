import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ActivatedRoute, Router } from '@angular/router';
import { KuheduServiceService } from 'src/app/kuhedu-service.service';
import { UserService } from '../../user.service';
import { EncryptionService } from '../../shared/services/encryption.service';


interface Mapping {
  [key: string]: string;
}

interface valuePathMapping {
  [key: string]: [string, string];
}

@Component({
  selector: 'app-creat-quiz',
  templateUrl: './creat-quiz.component.html',
  styleUrls: ['./creat-quiz.component.scss'],
})
export class CreatQuizComponent {
  constructor(
    private kuheduService: KuheduServiceService,
    private keySvc: EncryptionService,
    private http: HttpClient,
    private route: ActivatedRoute,
    private router: Router,
    private userService: UserService
  ) {}
  show: boolean = false;

  objectKeys: (o: object) => string[] = Object.keys;

  boardMapping: Mapping = {
    CBSE: 'CBSE',
    ICSE: 'ICSE',
  };
  stateMapping: Mapping = {
    IN: 'Central',
    AP: 'Andhra Pradesh',
  };
  languageIsoCodeMapping: Mapping = {
    EN: 'English',
    HI: 'Hindi',
  };
  // subjectMapping: Mapping = {
  //   PHY: 'Physics',
  //   CHM: 'Chemistry',
  //   BIO: 'Biology',
  //   SCE: 'Science',
  //   MTH: 'Mathematics',
  //   ENG: 'English',
  //   SSC: 'Social Science',
  //   GEO: 'Geography',
  //   CSE: 'Computer Science',
  //   HIN: 'Hindi',
  // };

  subjectMapping: valuePathMapping = {
    MTH: ['Mathematics', '../../../assets/mathsimg.png'],
    PHY: ['Physics', '../../../assets/physicsimg.png'],
    CHM: ['Chemistry', '../../../assets/chemimg.png'],
    BIO: ['Biology', '../../../assets/bioimg.png'],
    SCE: ['Science', '../../../assets/scienceimg.png'],
    // TODO: what do with rest of the subjects that are not in design
  };
  subjectTypeMapping: Mapping = {
    STEM: 'STEM',
    ARTS: 'Arts & Humanities',
    BSCM: 'Business & Commerce',
    SSCE: 'Social Science',
    HEDU: 'Health Education',
    OEDU: 'Occupationale Education',
  };
  examTypeMapping: Mapping = {
    GENL: 'General',
    OLMP: 'Olympiad',
    IITJ: 'IIT-JEE',
    NEET: 'NEET',
    WBJE: 'WBJEE',
  };
  questionTypeMapping: Mapping = {
    MCQ: 'MCQ',
    FIB: 'Fill In The Blank',
    TNF: 'True & False',
  };
  generationTypeMapping: Mapping = {
    AI: 'Generated by AI',
    MN: 'Generated Manually',
  };
  difficultyLevelMapping: Mapping = {
    '01': 'Easy',
    '02': 'Moderate',
    '03': 'Complex',
    '04': 'Advanced',
    '05': 'Expert',
  };
  typeOfQuestion: Mapping = {
    ST: 'Story Telling',
    CP: 'Comparision Based',
    AT: 'Activity Based',
    EB: 'Example Based',
    EP: 'Expirement Based',
    DG: 'Direct Question',
  };

  classMapping: Mapping = {
    '1': 'Class 1',
    '2': 'Class 2',
    '3': 'Class 3',
    '4': 'Class 4',
    '5': 'Class 5',
    '6': 'Class 6',
    '7': 'Class 7',
  };

  selectedSubject: string | null = null;

  handleSubject(subjectKey: string): void {
    console.log('Selected subject:', subjectKey);
    this.selectedSubject = subjectKey;
  }

  openModal(): void {
    this.show = true;
  }

  closemodal(): void {
    this.show = false;
  }

  selectedFile: File | null = null;

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.selectedFile = input.files[0];
    }
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    this.handleFile(event.dataTransfer?.files || null);
  }

  handleFile(fileList: FileList | null): void {
    if (fileList && fileList.length > 0) {
      this.selectedFile = fileList[0];
    }
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
  }

  onDragLeave(event: DragEvent): void {
    event.preventDefault();
  }

  uploadFile(): void {
    const uploadEndpoint = 'question/upload-question-using-csv-teacher';
    const formData = new FormData();

    const headers = new HttpHeaders({
      Authorization: 'Bearer ' + this.keySvc.decryptData(this.userService.getAccessToken() || ''),
    })

    if (this.selectedFile) {
      // Implement your file upload logic here
      console.log('Uploading file:', this.selectedFile);
      formData.append('question_csv', this.selectedFile);

      // Upload
      this.http
        .post(this.kuheduService.baseUrl + uploadEndpoint, formData, { headers })
        .subscribe((res: any) => {
          if (res.status === 200) {
            console.log('Upload response:', res);
            if (res.status === 200) {
              this.closemodal()
            }
          }
        });

      this.selectedFile = null;
    }
  }
}
